/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package fr.univlorraine.m2.gi.groupe2.api;

import io.swagger.annotations.*;
import fr.univlorraine.m2.gi.groupe2.model.Survey;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-10-31T12:55:18.203Z")

@Api(value = "surveys", description = "the surveys API")
@RequestMapping(value = "/Alex57x/Projet/1.0.0")
public interface SurveysApi {

    @ApiOperation(value = "Supprime un sondage", nickname = "deleteSurvey", notes = "Supprime définitivement un sondage.", response = Survey.class, tags = {"surveys",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "opération réussie", response = Survey.class),
            @ApiResponse(code = 404, message = "Ressource introuvable"),
            @ApiResponse(code = 500, message = "Echec de connexion à la base de données.")})
    @RequestMapping(value = "/surveys/{surveyID}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Survey> deleteSurvey(@ApiParam(value = "Identifiant du sondage à supprimer.", required = true) @PathVariable("surveyID") Long surveyID);


    @ApiOperation(value = "Clôture le sondage.", nickname = "endSurveys", notes = "Permet de clôturer le sondage avant la date de fin.", response = Survey.class, tags = {"surveys",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Opération réussie", response = Survey.class),
            @ApiResponse(code = 400, message = "Manque des informations dans le corps."),
            @ApiResponse(code = 404, message = "Ressource introuvable"),
            @ApiResponse(code = 409, message = "Certaines informations ne respectent pas les conditions."),
            @ApiResponse(code = 500, message = "Echec de connexion à la base de données.")})
    @RequestMapping(value = "/surveys/{surveyID}",
            produces = {"application/json"},
            method = RequestMethod.PATCH)
    ResponseEntity<Survey> endSurveys(@ApiParam(value = "ID du sondage pour lequel on souhaite la fin", required = true) @PathVariable("surveyID") Long surveyID);


    @ApiOperation(value = "Retourne un sondage.", nickname = "getSurvey", notes = "Retourne le sondage qui correspond à l'ID envoyé en paramètre.", response = Survey.class, tags = {"surveys",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "opération réussie", response = Survey.class),
            @ApiResponse(code = 404, message = "Ressource introuvable."),
            @ApiResponse(code = 500, message = "Echec de connexion à la base de données.")})
    @RequestMapping(value = "/surveys/{surveyID}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Survey> getSurvey(@ApiParam(value = "ID du sondage", required = true) @PathVariable("surveyID") Long surveyID);


    @ApiOperation(value = "Retourne la liste de tous les sondages.", nickname = "getSurveys", notes = "Retourne la liste de tous les sondages en cours ou qui ont eu lieu depuis la base de données.", response = Survey.class, responseContainer = "List", tags = {"surveys",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Ressource trouvé", response = Survey.class, responseContainer = "List"),
            @ApiResponse(code = 404, message = "Ressource introuvable."),
            @ApiResponse(code = 500, message = "Echec de connexion à la base de données.")})
    @RequestMapping(value = "/surveys",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Survey>> getSurveys();


    @ApiOperation(value = "Retourne les sondages actifs.", nickname = "getSurveysIsActifs", notes = "retourne les sondages qui sont actifs.", response = Survey.class, responseContainer = "List", tags = {"surveys",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "opération réussie", response = Survey.class, responseContainer = "List"),
            @ApiResponse(code = 404, message = "Ressource introuvable."),
            @ApiResponse(code = 500, message = "Echec de connexion à la base de données.")})
    @RequestMapping(value = "/surveys/actives",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Survey>> getSurveysIsActifs();


    @ApiOperation(value = "Retourne les sondages inactifs.", nickname = "getSurveysIsInactifs", notes = "retourne les sondages qui sont inactifs.", response = Survey.class, responseContainer = "List", tags = {"surveys",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "opération réussie", response = Survey.class, responseContainer = "List"),
            @ApiResponse(code = 404, message = "Ressource introuvable."),
            @ApiResponse(code = 500, message = "Echec de connexion à la base de données.")})
    @RequestMapping(value = "/surveys/expireds",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Survey>> getSurveysIsInactifs();


    @ApiOperation(value = "Modifie un sondage.", nickname = "updateSurvey", notes = "Modifie les informations du sondages.", response = Survey.class, tags = {"surveys",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "opération réussie", response = Survey.class),
            @ApiResponse(code = 400, message = "Manque des informations dans le corps."),
            @ApiResponse(code = 404, message = "Ressource introuvable"),
            @ApiResponse(code = 409, message = "Certaines informations ne respectent pas les conditions."),
            @ApiResponse(code = 500, message = "Echec de connexion à la base de données.")})
    @RequestMapping(value = "/surveys/{surveyID}",
            produces = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Survey> updateSurvey(@ApiParam(value = "Identifiant du sondage à modifier.", required = true) @PathVariable("surveyID") Long surveyID, @ApiParam(value = "Sondage modifié", required = true) @Valid @RequestBody Survey body);


    @ApiOperation(value = "Crée un nouveau sondage.", nickname = "uploadFile", notes = "", response = Survey.class, tags = {"surveys",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Sondage créé", response = Survey.class),
            @ApiResponse(code = 400, message = "Manque des informations dans le corps."),
            @ApiResponse(code = 409, message = "Certaines informations ne respectent pas les conditions."),
            @ApiResponse(code = 500, message = "Echec de connexion à la base de données.")})
    @RequestMapping(value = "/surveys",
            produces = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Survey> createSurvey(@ApiParam(value = "Un sondage doit être construit à l'aide d'un nom, d'une description et d'une date de fin.", required = true) @Valid @RequestBody Survey sondage);

}
